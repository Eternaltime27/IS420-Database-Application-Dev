/*Procedure 1*/
set serveroutput on; 
create or replace procedure customer_list (CustomerZip in VARCHAR2) IS
cursor customer_zip_cursor is 
select cust_id, cust_name from customer c
where c.cust_zipcode= CustomerZip;
customer_rec  customer_zip_cursor%rowtype; 
begin 
for customer_rec in  customer_zip_cursor 
loop 
dbms_output.put_line('Customer ID: ' || customer_rec.cust_id);
end loop;
exception when no_data_found then 
dbms_output.put_line('No data found');
end; 

/* execution statement which is used to get the results */

exec Customer_list(21044);

Create or replace function Find_Customer_ID (Param_Cust_Name in VARCHAR)
return number
as 
CustomerID customer.cust_id%type;
begin 
Select Cust_ID into CustomerID
from customer
where customer.cust_name = param_cust_name;
return CustomerID;
exception
when no_data_found then 
raise_application_error(-20001, 'Customer does not exist');
end;

/* Created by member 5. The following pl/sql procedure was used to insert values in the customer table */

Create or replace procedure Add_Customer (CustomerName in varchar2, CustomerEmail in Varchar2, 
    CustomerStreetAddress in Varchar2, CustomerCity in varchar2, 
    CustomerState in varchar2, CustomerZipCode in varchar2,
    CreditCardNum in varchar2)     
is 
Begin 
    insert into customer (Cust_ID,  Cust_Name, Cust_Email, cust_street_address,  cust_city, 
                            cust_state, cust_zipcode,  cust_cc_num) 
    values (cust_id.nextval, CustomerName,  CustomerEmail,  CustomerStreetAddress,
                CustomerCity,  CustomerState, CustomerZipCode,  CreditCardNum);
         dbms_output.put_line('Values added to the customer table');
exception
	when no_data_found then 
	raise_application_error(-20001, 'No values inserted');
end;
commit;
end;

exec Add_Customer ('Anne Roberts', 'anneroberts3@gmail.com', '129 Light st.', 'Hanover', 'MD', 21134, 4460116013858774);
exec Add_Customer ('Robert Jr.', 'RobertJr4@gmail.com', '1223 Random st.', 'Bowie', 'MD', 211324, 4460116013858774);
exec Add_Customer ('John West', 'JohnW55@gmail.com', '129 Town Center Blvd', 'Fresno', 'CA', 93650, 4460116013856584);
exec Add_Customer ('Avery Hynes', 'AveryH5@gmail.com', '1329 Town Center Blvd', 'Fresno', 'CA', 93650, 4460134913856584);
exec Add_Customer ('Alisa Jane', 'Ajane345@gmail.com', '129 Harvey St.', 'Freeport', 'NY', 11520, 4460155323856584);
exec Add_Customer ('Chris Evans', 'Cevans345@gmail.com', '818 Olivia St.', 'Key West', 'FL', 33040, 4460117013856654);
exec Add_Customer ('Chrisian Miller', 'Christianm36@gmail.com', '278 Olivia St.', 'Key West', 'FL', 33040, 4460553013856854);


/* Created by member 5.This function is used to generate the report of customers who paid the most. */ 

Create or replace procedure MostMoneySpent as
cursor MaxAmountPaid  is
select cust_name, sum(amount_paid) as amount_paid
    from customer c, orders o
    where c.cust_id = o.cust_id
    group by cust_name
    order by amount_paid desc;
    mostPaid MaxAmountPaid%rowtype; 
    temp number;
Begin
    temp := 0;
   dbms_output.put_line('List of customers who paid the most: ');
    for MostPaid in MaxAmountPaid 
    loop
    if temp < 3 then
    dbms_output.put_line('- '|| MostPaid.cust_name || ' paid ' || MostPaid.amount_paid);
    temp := temp + 1;
    end if;
    end loop;
 
exec MostMoneySpent;
    
/* Created by member 5. This function is used to generate the report of customers who paid the Least. */ 

Create or replace procedure LeastMoneySpent as
cursor MinAmountPaid  is
select cust_name, sum(amount_paid) as amount_paid
    from customer c, orders o
    where c.cust_id = o.cust_id
    group by cust_name
    order by amount_paid ASC;
    LeastPaid MinAmountPaid%rowtype; 
    temp number;
Begin
    temp := 0;
   dbms_output.put_line('List of customers who paid the least: ');
    for LeastPaid in MinAmountPaid 
    loop
    if temp < 3 then
    dbms_output.put_line('- '||LeastPaid.cust_name || ' paid ' || LeastPaid.amount_paid);
    temp := temp + 1;
    end if;
    end loop;
 exception
	when no_data_found then 
	raise_application_error(-20001, 'Customer does not exist');
end;
 
exec LeastMoneySpent;

/* Created by member 5. This function is used to generate sum of tips by state in a descending order. */ 
Create or replace procedure TipsByState as
cursor GenerousTips  is
select cust_state, sum(tip) as SumTips
    from customer c, orders o
    where c.cust_id = o.cust_id
    group by cust_state
    order by SumTips DESC;
    C_Tips GenerousTips%rowtype; 
Begin
    dbms_output.put_line('State' ||'  '||'Tips');
    dbms_output.put_line('------------');
    for C_Tips in GenerousTips
    loop
    dbms_output.put_line(C_Tips.cust_state || '     ' ||C_Tips.SumTips);
    end loop;
    exception 
         when no_data_found then
         raise_application_error(-20001, 'No data exist');
    end;
   
 exec TipsByState;